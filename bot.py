import asyncio

import pandas as pd
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from setting import *
from data import *


class GetChance(StatesGroup):
    state_start = State()
    main_menu = State()
    useful_info = State()
    hw_it_work = State()
    get_direction_name = State()
    get_priority = State()
    get_competitive_scores = State()
    get_achievement_scores = State()
    get_ege_objects_number = State()
    get_citizenship = State()
    get_with_ege_status = State()


async def get_prediction_and_probabilities(data):
    df = pd.DataFrame([data])
    numeric_features = loaded_pipeline.numeric_features
    categorical_features = loaded_pipeline.categorical_features
    df_numeric = df[numeric_features]
    df_categorical = df[categorical_features]
    df_processed = pd.concat([df_numeric, df_categorical], axis=1)
    prediction = loaded_pipeline.predict(df_processed)
    probabilities = loaded_pipeline.predict_proba(df_processed)
    probabilities_class_1 = probabilities[:, 1]
    return prediction, probabilities_class_1


@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(GetChance.main_menu)
    await message.answer(welcome_text, reply_markup=main_keyboard)


@dp.message(GetChance.main_menu)
async def main_menu(message: types.Message, state: FSMContext):
    if message.text == '–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ':
        await state.set_state(GetChance.get_direction_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    elif message.text == '–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await state.set_state(GetChance.useful_info)
        await message.answer("–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?", reply_markup=useful_keyboard)
    elif message.text == '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?':
        await message.answer(hw_it_works_about, reply_markup=main_keyboard)


@dp.message(GetChance.useful_info)
async def main_menu(message: types.Message, state: FSMContext):
    if message.text == '–û –ì–£–ê–ü':
        await message.answer(about_suai)
    elif message.text == '–û –≤–æ–µ–Ω–Ω–æ–º —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ':
        await message.answer(about_guap_army)
    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å–∏–∏':
        await message.answer(comission_info)
    elif message.text == '–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å':
        await message.answer(about_study_process)
    elif message.text == '–ë–∞–ª–ª—ã –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç':
        await message.answer(previous_points)
    elif message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(GetChance.main_menu)
        await message.answer('–û–∫–µ–π, –∏–¥–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_keyboard)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –ø–µ—Ä–µ—á–Ω—è')


@dp.message(GetChance.get_direction_name)
async def process_direction_name(message: types.Message, state: FSMContext):
    if message.text in DIRECTIONS:
        await state.update_data(name=message.text)
        await state.set_state(GetChance.get_priority)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
    else:
        await message.answer('–í—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–∏–±–æ –Ω–µ—Ç, –ª–∏–±–æ –≤—ã –≤–≤–µ–ª–∏ –µ—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∏–º–µ—Ä 09.03.03')


@dp.message(GetChance.get_priority)
async def process_priority(message: types.Message, state: FSMContext):
    if message.text in PROIRITIES:
        await state.update_data(priority=int(message.text))
        await state.set_state(GetChance.get_with_ege_status)
        await message.answer('–ü–æ—Å—Ç—É–ø–∞–µ—Ç–µ –ø–æ –±–∞–ª–ª–∞–º –ï–ì–≠ –∏–ª–∏ –ø–æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–∞–º?',
                             reply_markup=with_ege_or_not_keyboard)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è get_with_ege_status
@dp.message(GetChance.get_with_ege_status)
async def process_with_ege_status(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –ï–ì–≠ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text == '–ü–æ—Å—Ç—É–ø–∞—é –ø–æ –±–∞–ª–ª–∞–º –ï–ì–≠':
        await state.update_data(with_ege=1)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–µ –±–∞–ª–ª—ã")
        await state.set_state(GetChance.get_competitive_scores)
    elif message.text == '–ü–æ—Å—Ç—É–ø–∞—é –ø–æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç–∫–∑–∞–º–µ–Ω–∞–º':
        await state.update_data(with_ege=0)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–µ –±–∞–ª–ª—ã")
        await state.set_state(GetChance.get_competitive_scores)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–µ—Ä–µ—á–Ω—è')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è get_competitive_scores
@dp.message(GetChance.get_competitive_scores)
async def process_competitive_scores(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–µ –±–∞–ª–ª—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if message.text.isdigit():
        await state.update_data(competitive_scores=int(message.text))
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(GetChance.get_achievement_scores)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã–µ –±–∞–ª–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è get_achievement_scores
@dp.message(GetChance.get_achievement_scores)
async def process_achievement_scores(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text.isdigit():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–ª—ã –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(achievement_scores=int(message.text))
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if data['with_ege']:
            await state.set_state(GetChance.get_ege_objects_number)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ï–ì–≠, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–¥–∞–≤–∞–ª–∏")
        else:
            await state.update_data(ege_average_score=0)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", reply_markup=countries_keyboard)
            await state.set_state(GetChance.get_citizenship)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è get_ege_objects_number
@dp.message(GetChance.get_ege_objects_number)
async def process_ege_objects_number(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        data = await state.get_data()
        ege_average_score = int((data['competitive_scores'] + data['achievement_scores']) / int(message.text))
        await state.update_data(ege_average_score=ege_average_score)
        await state.set_state(GetChance.get_citizenship)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", reply_markup=countries_keyboard)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è get_citizenship
@dp.message(GetChance.get_citizenship)
async def process_citizenship(message: types.Message, state: FSMContext):
    if message.text in COUNTRIES:
        await state.update_data(citizenship=COUNTRIES[message.text])
        data = await state.get_data()
        prediction, probabilities_class_1 = await get_prediction_and_probabilities(data)
        await message.answer('‚è≥ –°–µ–∫—É–Ω–¥–æ—á–∫—É, –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è... ü§ñüß†‚ú®')
        await asyncio.sleep(3)
        if probabilities_class_1[0] <= 0.4:
            await message.answer(
                f'ü§î –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å,'
                f' –≤–µ–¥—å —à–∞–Ω—Å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probabilities_class_1[0] * 100:.2f}%... üìâ '
                f'–ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º! üöÄü§ì '
                f'(–ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –±–∞–ª–ª—ã –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å https://priem.guap.ru/bach/archive) üìä‚ú®',
                reply_markup=main_keyboard)
            await state.set_state(GetChance.main_menu)

        elif 0.4 < probabilities_class_1[0] <= 0.8:
            await message.answer(
                f'–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∏–π —à–∞–Ω—Å –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç'
                f' {probabilities_class_1[0] * 100:.2f}%! üåü –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –º–∏—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –±–æ–≥–∞—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ–º.'
                f'  –°–æ–≤–µ—Ç—É–µ–º –≤–∞–º —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª—è–¥–µ—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º.'
                f' üöÄüìö (–ü–æ–¥—Ä–æ–±–Ω—ã–µ –±–∞–ª–ª—ã –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å https://priem.guap.ru/bach/archive) üìä‚ú®',
                reply_markup=main_keyboard)
            await state.set_state(GetChance.main_menu)

        elif probabilities_class_1[0] > 0.8:
            await message.answer(
                f'üåü –ù–∏—á–µ–≥–æ —Å–µ–±–µ, —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏!'
                f' –®–∞–Ω—Å –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {probabilities_class_1[0] * 100:.2f}%üöÄ '
                f'–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ! üéì‚ú®',
                reply_markup=main_keyboard)
            await state.set_state(GetChance.main_menu)

    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ø–µ—Ä–µ—á–Ω—è', reply_markup=countries_keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
